Car Price Prediction Model:
Car Brand
Mileage
Engine Capacity
Transimission
Fuel
Max Power
___________________________________________
STEPS INVOLVE IN MAKING THE MODEL:
-->Car Dataset(Along with selling price)
-->Pre-Processing(Null and Duplicate check)
-->Data Analysis(Adding and removing the col)
-->AFter analysis we divide the dataset into
-->two parts (input features & Output features)
-->Splitting the DataSet(Train(0.8) & Test(0.2))
-->Model Creation(Scikit-Learn)
-->Model or algorithm selection(Linear Regression)
-->Saving the Model(Using Pickle)
-->Deployment(Using Streamlit)
_____________________________________________
Library Installation: Numpy, Pandas, Scikit-learn, Pickle, Streamlit
import pickle
Importing the Libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
_____________________________________________
Now we are going to read the dataset:
Link for dataset: 
https://drive.google.com/file/d/1UIj8rOmDJn4UgqDTJezMNfzr7jh_behL/view
_____________________________________________
Reading and seeing the dataset:
cars_Data = pd.read_csv('Downloads/Cardetails.csv')
cars_Data.head()
Now we will check which columns are necessary and which are
not necessary, so unnecessary columns arw dropped.
Necessary columns: Name, Year, Selling_Price, Km_Driven, fuel,
Transmission, owner, mileage, seats, Max_power.
drop the Torque column.
_____________________________________________
cars_Data.drop(columns=['torque'], inplace = True)
_____________________________________________
Now check again whether the torque is removed or not:
cars_Data.head()
_____________________________________________
cars_Data.shape #Gives us the columns and rows.....
_____________________________________________
Pre-Processing:
CHecking for NULL Values:
cars_Data.isnull().sum()
name               0
year               0
selling_price      0
km_driven          0
fuel               0
seller_type        0
transmission       0
owner              0
mileage          221
engine           221
max_power        215
seats            221
dtype: int64
_____________________________________________________
Now we are going to drop the null values:
cars_Data.dropna(inplace=True)
Now checking the record count:
drop to some values 7907 etc....
_____________________________________________________
Now Duplicate Check:
cars_Data.duplicated().sum()
#1189 values are duplicated.....
_____________________________________________________		
Dropping the duplicate values also:
cars_Data.drop_duplicates(inplace=True)
_____________________________________________________
Now checking the data whether it drop the values or not
cars_Data.shape
_____________________________________________________
Checking the info of the dataset...... datatypes
cars_Data.info()
_____________________________________________________
DATA ANALYSIS:
In this we check the type of elements related to each
and every column have.....
for col in cars_Data.columns:
    print('Unique Vaues of ' + col)
    print(cars_Data[col].unique())
    print('<======================================================>')
_____________________________________________________
Now we are going to change the categorical columns
car names
fuel
tranmission
seller type etc
into numerical values
Also drop the extra values with mileage and fuel 
that are km/l, km/kg etc
_____________________________________________________
def get_brand_name(car_name):
    car_name=car_name.split(' ')[0]
    return car_name.strip()
get_brand_name('Maruti Swift Dzire VDI')
it will give only the 
'Maruti' as output
it means it works, now apply it to the entire dataset
_____________________________________________________
def clean_data(value):
    value=value.split(' ')[0]
    value = value.strip()
    if value == '':
        value = 0
    return float(value)
_____________________________________________________
cars_Data['name'] = cars_Data['name'].apply(get_brand_name)
cars_Data['name'].unique()
output:
array(['Maruti', 'Skoda', 'Honda', 'Hyundai', 'Toyota', 'Ford', 'Renault',
       'Mahindra', 'Tata', 'Chevrolet', 'Datsun', 'Jeep', 'Mercedes-Benz',
       'Mitsubishi', 'Audi', 'Volkswagen', 'BMW', 'Nissan', 'Lexus',
       'Jaguar', 'Land', 'MG', 'Volvo', 'Daewoo', 'Kia', 'Fiat', 'Force',
       'Ambassador', 'Ashok', 'Isuzu', 'Opel'], dtype=object)
_____________________________________________________
Now do the same for mileage also:
cars_Data['mileage'] = cars_Data['mileage'].apply(clean_data)
cars_Data['max_power'] = cars_Data['max_power'].apply(clean_data)
cars_Data['engine'] = cars_Data['engine'].apply(celan_data)
_____________________________________________________
now we are going to check all the unique values:
so:
for col in cars_Data.columns:
    print('Unique Vaues of ' + col)
    print(cars_Data[col].unique())
    print('<======================================================>')
_____________________________________________________
Now we are done with the uniqueness:
next step is to change the categorical values to numerical values:
cars_Data['name'].replace(['Maruti', 'Skoda', 'Honda', 'Hyundai', 'Toyota', 'Ford', 'Renault',
       'Mahindra', 'Tata', 'Chevrolet', 'Datsun', 'Jeep', 'Mercedes-Benz',
       'Mitsubishi', 'Audi', 'Volkswagen', 'BMW', 'Nissan', 'Lexus',
       'Jaguar', 'Land', 'MG', 'Volvo', 'Daewoo', 'Kia', 'Fiat', 'Force',
       'Ambassador', 'Ashok', 'Isuzu', 'Opel'], 
                          [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31], inplace = True)
______________________________________________________
Now we change the transmission type values:
cars_Data['transmission'].unique()
______________________________________________________
cars_Data['transmission'].replace(['Manual', 'Automatic'], 
                                  [1,2], inplace = True)
______________________________________________________
DO same for seller_type adn fuel:
cars_Data['seller_type'].unique()
cars_Data['seller_type'].replace(['Individual', 'Dealer', 'Trustmark Dealer'], 
                                 [1,2,3], inplace = True)
______________________________________________________
cars_Data['fuel'].unique()
cars_Data['fuel'].replace(['Diesel', 'Petrol', 'LPG', 'CNG'],
                          [1,2,3,4], inplace = True)
______________________________________________________
Now check the dataset all the columns are changed into
int64
cars_Data.info()
<class 'pandas.core.frame.DataFrame'>
Index: 6718 entries, 0 to 8125
Data columns (total 12 columns):
 #   Column         Non-Null Count  Dtype  
---  ------         --------------  -----  
 0   name           6718 non-null   int64  
 1   year           6718 non-null   int64  
 2   selling_price  6718 non-null   int64  
 3   km_driven      6718 non-null   int64  
 4   fuel           6718 non-null   int64  
 5   seller_type    6718 non-null   int64  
 6   transmission   6718 non-null   int64  
 7   owner          6718 non-null   object 
 8   mileage        6718 non-null   object 
 9   engine         6718 non-null   object 
 10  max_power      6718 non-null   object 
 11  seats          6718 non-null   float64
dtypes: float64(1), int64(7), object(4)
memory usage: 682.3+ KB
_____________________________________________________________
done with the data analysis....
we have to change the owner into numerical data as well...
cars_Data['owner'].unique()
cars_Data['owner'].replace(['First Owner', 'Second Owner', 'Third Owner', 'Fourth & Above Owner', 'Test Drive Car'],
                           [1,2,3,4,5], inplace = True)
_____________________________________________________________

Reset the index......
cars_Data.reset_index(inplace=True)
cars_Data
drop the index column also
cars_Data.drop(columns = ['index'])
_____________________________________________________________
Now setting the input data and output data.....
input_data = cars_Data.drop(columns=['selling_price'])
output_data = cars_Data['selling_price']
_____________________________________________________________
Now we are going to make the set as training and testing:
x_train, x_test, y_train, y_test = train_test_split(input_data, output_data, test_size = 0.2)
_____________________________________________________________
Model Creation:
model = LinearRegression()
model.fit(x_train, y_train)
_____________________________________________________________
now let predict the values:
predict = model.predict(x_test)
_____________________________________________________________
Now we check the one value and predict the different values:
input_data_model = pd.DataFrame(
    [[3504, 1,2007,70000,2,1,1,1,18.2,998.0,67.1,5.0]],
    columns=['index' , 'name' , 'year' , 'km_driven' , 'fuel' , 'seller_type' , 'transmission' , 'owner' , 'mileage' , 'engine' , 'max_power' , 'seats'])
_____________________________________________________________
model.predict(input_data_model)

___________________________________________
Pickle:
Serialization is the process of storing 
a data structure in memory so that you 
can load or transmit it when required 
without losing its current state.
Picture explaining the Serialization.

In Python, we work with high-level 
data structures such as lists, tuples, 
and sets. However, when we want to store 
these objects in memory, they need to be 
converted into a sequence of bytes that 
the computer can understand. This process 
is called serialization.

The next time we want to access the same 
data structure, this sequence of bytes 
must be converted back into the high-level 
object in a process known as deserialization.
_____________________________________________
Python pickle module is used for serializing 
and de-serializing a Python object structure. 
Any object in Python can be pickled so that 
it can be saved on disk. What Pickle does is 
it “serializes” the object first before writing 
it to a file. Pickling is a way to convert a Python 
object (list, dictionary, etc.) into a character 
stream. The idea is that this character stream 
contains all the information necessary to reconstruct 
the object in another Python script. It provides 
a facility to convert any Python object to a 
byte stream. This Byte stream contains all essential 
information about the object so that it can be 
reconstructed, or “unpickled” and get back into 
its original form in any Python.
_____________________________________________
Streamlit: Streamlit is an open-source Python
framework for data scientists and AI/ML engineers 
to deliver dynamic data apps with only a few 
lines of code. Build and deploy powerful data 
apps in minutes.
_____________________________________________
